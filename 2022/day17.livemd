# Advent of Code 2022

```elixir
Mix.install([
  {:kino, "~> 0.7.0"},
  :libgraph,
  :memoize,
  :distance,
  :printex,
  :drawille,
  {:comb, git: "https://github.com/tallakt/comb.git"},
  {:nx, "~> 0.2"},
  {:vega_lite, "~> 0.1.6"},
  {:kino_vega_lite, "~> 0.1.7"}
])
```

## Day 17

```elixir
input = """

"""
```

```elixir
example = """
>>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>
"""
```

```elixir
defmodule Day17 do
  use Agent

  def start do
    Agent.start_link(fn -> [] end, name: __MODULE__)
  end

  def pieces do
    %{
      0 => [{0, 0}, {1, 0}, {2, 0}, {3, 0}],
      1 => [{1, 0}, {0, 1}, {1, 1}, {2, 1}, {1, 2}],
      2 => [{0, 0}, {1, 0}, {2, 0}, {2, 1}, {2, 2}],
      3 => [{0, 0}, {0, 1}, {0, 2}, {0, 3}],
      4 => [{0, 0}, {1, 0}, {0, 1}, {1, 1}]
    }
  end

  def generate_piece(map, no) do
    {sx, sy} = start_pos(map)

    pieces()
    |> then(fn p ->
      Map.get(p, rem(no, Enum.count(p)))
    end)
    |> Enum.reduce(map, fn {x, y}, acc ->
      Map.put(acc, {x + sx, y + sy}, "@")
    end)
  end

  def start_pos(map) do
    {2, highest(map)}
  end

  def highest(map) do
    map
    |> Enum.filter(fn {_, v} -> v == "#" end)
    |> Enum.map(fn {{_, y}, _} -> y + 1 end)
    |> Enum.max(fn -> 0 end)
    |> Kernel.+(3)
  end

  def draw(map) do
    size = size(map)

    Enum.each(elem(size, 1)..0, fn y ->
      Enum.map(0..6, fn x ->
        Map.get(map, {x, y}, ".")
      end)
      |> Enum.join("")
      |> IO.puts()
    end)

    IO.puts("\n")
    map
  end

  def tick(map, moves, dir, 0, move, last) do
    map
    |> generate_piece(0)
    # |> draw
    |> tick(moves, dir, 1, move, last)
  end

  def tick(map, _, _, piece, _, last) when piece == last + 1 do
    map
    |> Enum.filter(fn {_, v} -> v == "#" end)
    |> Enum.map(fn {{_, y}, _} -> y end)
    |> Enum.max()
    |> Kernel.+(1)
  end

  def tick(map, moves, dir, piece, move, last) do
    {map, inc} =
      case move do
        :push ->
          pd = Enum.at(moves, rem(dir, Enum.count(moves)))
          {push_piece(map, pd), 0}

        :fall ->
          fall(map, piece)
      end
      |> then(fn {map, inc} ->
        # draw(map)
        {map, inc}
      end)

    dir =
      if move == :push do
        dir + 1
      else
        dir
      end

    tick(map, moves, dir, piece + inc, change_move(move), last)
  end

  def change_move(:push), do: :fall
  def change_move(:fall), do: :push

  def fall(map, piece) do
    pp =
      map
      |> Enum.filter(fn {_, v} -> v == "@" end)
      |> Enum.map(fn {{x, y}, _} -> {x, y} end)

    solids =
      map
      |> Enum.filter(fn {_, v} -> v == "#" end)
      |> Enum.map(fn {p, _} -> p end)

    miny =
      pp
      |> Enum.map(fn {_, y} -> y end)
      |> Enum.min()

    ic =
      MapSet.size(
        MapSet.intersection(
          MapSet.new(solids),
          MapSet.new(Enum.map(pp, fn {x, y} -> {x, y - 1} end))
        )
      )

    if miny == 0 or ic > 0 do
      Enum.reduce(pp, map, fn p, acc ->
        Map.put(acc, p, "#")
      end)
      |> generate_piece(piece)
      |> then(fn map ->
        score =
          map
          |> Enum.filter(fn {_, v} -> v == "#" end)
          |> Enum.map(fn {{_, y}, _} -> y end)
          |> Enum.max()
          |> Kernel.+(1)

        Agent.update(__MODULE__, fn x -> [score | x] end)

        {map, 1}
      end)
    else
      map =
        Enum.reduce(pp, map, fn p, acc ->
          Map.put(acc, p, ".")
        end)

      map =
        Enum.reduce(pp, map, fn {px, py}, acc ->
          Map.put(acc, {px, py - 1}, "@")
        end)

      {map, 0}
    end
  end

  def push_piece(map, direction) do
    {minx, maxx} =
      map
      |> Enum.filter(fn {_, v} -> v == "@" end)
      |> Enum.map(fn {{x, _}, _} -> x end)
      |> Enum.min_max()

    cond do
      minx == 0 and direction == :left -> map
      minx > 0 and direction == :left -> push_left(map)
      maxx == 6 and direction == :right -> map
      maxx < 6 and direction == :right -> push_right(map)
    end
  end

  def push_left(map) do
    solids =
      map
      |> Enum.filter(fn {_, v} -> v == "#" end)
      |> Enum.map(fn {p, _} -> p end)

    pp =
      map
      |> Enum.filter(fn {_, v} -> v == "@" end)
      |> Enum.map(fn {p, _} -> p end)

    ic =
      MapSet.size(
        MapSet.intersection(
          MapSet.new(solids),
          MapSet.new(Enum.map(pp, fn {x, y} -> {x - 1, y} end))
        )
      )

    if ic == 0 do
      map =
        Enum.reduce(pp, map, fn p, acc ->
          Map.put(acc, p, ".")
        end)

      Enum.reduce(pp, map, fn {px, py}, acc ->
        Map.put(acc, {px - 1, py}, "@")
      end)
    else
      map
    end
  end

  def push_right(map) do
    solids =
      map
      |> Enum.filter(fn {_, v} -> v == "#" end)
      |> Enum.map(fn {p, _} -> p end)

    pp =
      map
      |> Enum.filter(fn {_, v} -> v == "@" end)
      |> Enum.map(fn {p, _} -> p end)

    ic =
      MapSet.size(
        MapSet.intersection(
          MapSet.new(solids),
          MapSet.new(Enum.map(pp, fn {x, y} -> {x + 1, y} end))
        )
      )

    if ic == 0 do
      map =
        Enum.reduce(pp, map, fn p, acc ->
          Map.put(acc, p, ".")
        end)

      Enum.reduce(pp, map, fn {px, py}, acc ->
        Map.put(acc, {px + 1, py}, "@")
      end)
    else
      map
    end
  end

  def size(map) do
    map
    |> Map.keys()
    |> Enum.reduce({0, 0}, fn {x, y}, {maxX, maxY} ->
      {max(x, maxX), max(y, maxY)}
    end)
    |> Tuple.to_list()
    |> Enum.map(&(&1 + 1))
    |> List.to_tuple()
  end

  def part1(moves) do
    start()
    tick(%{}, moves, 0, 0, :push, 2022)
  end

  def part2(moves) do
    start()
    tick(%{}, moves, 0, 0, :push, 10000)
  end

  def input(data) do
    data
    |> String.trim()
    |> String.graphemes()
    |> Enum.map(fn c ->
      case c do
        "<" -> :left
        ">" -> :right
      end
    end)
  end

  def to_plot do
    Agent.get(__MODULE__, fn x -> x end)
    |> Enum.with_index()
    |> Enum.reduce({[], []}, fn {val, ind}, {iterations, heights} ->
      {iterations ++ [ind], heights ++ [val]}
    end)
  end

  def stop do
    Agent.stop(__MODULE__)
  end
end
```

## Part 1

```elixir
input |> Day17.input() |> Day17.part1()
```

## Part 2

```elixir
Day17.stop()
input |> Day17.input() |> Day17.part2()

{iterations, heights} = Day17.to_plot()
Day17.stop()

VegaLite.new(width: 800, height: 400)
# Specify data source for the graphic using one of the data_from_* functions
|> VegaLite.data_from_values(iteration: iterations, score: heights)
# Pick a visual mark
|> VegaLite.mark(:line)
# Map data fields to visual properties of the mark, in this case point positions
|> VegaLite.encode_field(:x, "iteration", type: :quantitative)
|> VegaLite.encode_field(:y, "score", type: :quantitative)
```
