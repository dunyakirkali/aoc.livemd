# Advent of Code 2022

```elixir
Mix.install([
  {:kino, "~> 0.7.0"},
  :libgraph,
  :memoize,
  :distance,
  :printex,
  :drawille,
  {:comb, git: "https://github.com/tallakt/comb.git"}
])
```

## Day 10

```elixir
input = """
addx 1
noop
noop
addx 4
addx 5
addx -2
addx 19
addx -12
addx 3
addx -2
addx 4
noop
noop
noop
addx 3
addx -8
addx 15
addx 1
noop
noop
addx 6
addx -1
noop
addx -38
noop
addx 10
addx -5
noop
addx 3
addx 2
addx 7
noop
noop
addx 3
noop
addx 2
addx 3
addx -2
addx 2
addx 7
noop
noop
addx 9
noop
addx -12
noop
addx 11
addx -38
noop
noop
noop
addx 5
addx 5
noop
noop
noop
addx 3
addx -12
addx 14
noop
addx 1
addx 3
addx 1
addx 5
addx 4
addx 1
noop
noop
noop
noop
noop
addx -9
addx 17
addx -39
addx 38
addx -8
addx -26
addx 3
addx 4
addx 16
noop
addx -11
addx 3
noop
addx 2
addx 3
addx -2
addx 2
noop
addx 13
addx -8
noop
addx 7
addx -5
addx 8
addx -40
addx 16
addx -9
noop
addx -7
addx 8
addx 2
addx 7
noop
noop
addx -15
addx 16
addx 2
addx 5
addx 2
addx -20
addx 12
addx 11
addx 8
addx -1
addx 3
noop
addx -39
addx 2
noop
addx 5
noop
noop
noop
addx 4
addx 1
noop
noop
addx 2
addx 5
addx 2
addx 1
addx 4
addx -1
addx 2
noop
addx 2
noop
addx 8
noop
noop
noop
addx -10
noop
noop
"""
```

```elixir
example = """
noop
addx 3
addx -5
"""
```

```elixir
example2 = """
addx 15
addx -11
addx 6
addx -3
addx 5
addx -1
addx -8
addx 13
addx 4
noop
addx -1
addx 5
addx -1
addx 5
addx -1
addx 5
addx -1
addx 5
addx -1
addx -35
addx 1
addx 24
addx -19
addx 1
addx 16
addx -11
noop
noop
addx 21
addx -15
noop
noop
addx -3
addx 9
addx 1
addx -3
addx 8
addx 1
addx 5
noop
noop
noop
noop
noop
addx -36
noop
addx 1
addx 7
noop
noop
noop
addx 2
addx 6
noop
noop
noop
noop
noop
addx 1
noop
noop
addx 7
addx 1
noop
addx -13
addx 13
addx 7
noop
addx 1
addx -33
noop
noop
noop
addx 2
noop
noop
noop
addx 8
noop
addx -1
addx 2
addx 1
noop
addx 17
addx -9
addx 1
addx 1
addx -3
addx 11
noop
noop
addx 1
noop
addx 1
noop
noop
addx -13
addx -19
addx 1
addx 3
addx 26
addx -30
addx 12
addx -1
addx 3
addx 1
noop
noop
noop
addx -9
addx 18
addx 1
addx 2
noop
noop
addx 9
noop
noop
noop
addx -1
addx 2
addx -37
addx 1
addx 3
noop
addx 15
addx -21
addx 22
addx -6
addx 1
noop
addx 2
addx 1
noop
addx -10
noop
noop
addx 20
addx 1
addx 2
addx 2
addx -6
addx -11
noop
noop
noop
"""
```

```elixir
moves =
  input
  |> String.split("\n", trim: true)
  |> Enum.map(fn line ->
    cond do
      line == "noop" ->
        :noop

      String.starts_with?(line, "addx") ->
        ["addx", amount] = String.split(line, " ", trim: true)
        {:addx, String.to_integer(amount)}
    end
  end)
```

## Part 1

```elixir
defmodule Day10 do
  def run(moves) do
    Stream.unfold(0, fn
      241 -> nil
      n -> {n, n + 1}
    end)
    |> Enum.to_list()
    |> Enum.reduce({%{x: 1}, -1, moves, []}, fn step, {regs, dur, moves, collect} ->
      if moves == [] do
        {
          regs,
          dur,
          moves,
          collect
        }
      else
        [cur_mov | rem_mov] = moves
        rec = {step, regs[:x]}
        collect = [rec | collect]

        case dur do
          -1 ->
            {
              regs,
              duration(cur_mov),
              moves,
              collect
            }

          0 ->
            {
              execute(cur_mov, regs),
              duration(cur_mov),
              rem_mov,
              collect
            }

          _ ->
            {
              regs,
              dur - 1,
              moves,
              collect
            }
        end
      end
    end)
  end

  def duration(move) do
    case move do
      :noop -> 0
      {:addx, _} -> 1
    end
  end

  def execute(move, regs) do
    case move do
      :noop -> regs
      {:addx, amount} -> Map.update!(regs, :x, &(&1 + amount))
    end
  end
end

moves
|> Day10.run()
|> elem(3)
|> Enum.reverse()
|> Enum.filter(fn {step, _} ->
  Enum.member?([20, 60, 100, 140, 180, 220], step)
end)
|> Enum.map(fn {s, x} ->
  s * x
end)
|> Enum.sum()
```



## Part 2

```elixir
moves
|> Day10.run()
|> elem(3)
|> Enum.reverse()
|> Enum.chunk_every(40)
|> Enum.reduce(:ok, fn chunk, acc ->
  chunk
  |> Enum.reduce(acc, fn {step, x}, acc ->
    if(Enum.member?([x - 1, x, x + 1], rem(step - 1, 40))) do
      IO.write("#")
    else
      IO.write(".")
    end

    acc
  end)

  IO.write("\n")
  acc
end)
```
