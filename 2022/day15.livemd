# Advent of Code 2022

```elixir
Mix.install([
  {:kino, "~> 0.7.0"},
  :libgraph,
  :memoize,
  :distance,
  :printex,
  :drawille,
  {:comb, git: "https://github.com/tallakt/comb.git"},
  {:nx, "~> 0.2"},
  {:csp, "~> 0.1"},
  {:solverl, ">= 1.0.0"}
])
```

## Day 15

```elixir
input = """
Sensor at x=3428425, y=2345067: closest beacon is at x=3431988, y=2379841
Sensor at x=928237, y=25774: closest beacon is at x=1212315, y=-161555
Sensor at x=2061220, y=2396791: closest beacon is at x=2038311, y=2495160
Sensor at x=1830400, y=2994568: closest beacon is at x=1910058, y=3117415
Sensor at x=2485733, y=2625804: closest beacon is at x=2038311, y=2495160
Sensor at x=1855873, y=3971916: closest beacon is at x=1910058, y=3117415
Sensor at x=119582, y=3929652: closest beacon is at x=311197, y=4221202
Sensor at x=1069031, y=3509672: closest beacon is at x=1910058, y=3117415
Sensor at x=3368023, y=2213635: closest beacon is at x=3431988, y=2379841
Sensor at x=3713877, y=2460862: closest beacon is at x=3431988, y=2379841
Sensor at x=3593503, y=2174008: closest beacon is at x=3507689, y=2000000
Sensor at x=501760, y=93436: closest beacon is at x=1212315, y=-161555
Sensor at x=3712703, y=214999: closest beacon is at x=3507689, y=2000000
Sensor at x=1594824, y=2790273: closest beacon is at x=1910058, y=3117415
Sensor at x=2539549, y=3190814: closest beacon is at x=1910058, y=3117415
Sensor at x=3522790, y=2671548: closest beacon is at x=3431988, y=2379841
Sensor at x=1001452, y=1327490: closest beacon is at x=1212315, y=-161555
Sensor at x=629209, y=2451628: closest beacon is at x=-416149, y=2226089
Sensor at x=2636827, y=1146266: closest beacon is at x=3507689, y=2000000
Sensor at x=3909, y=625124: closest beacon is at x=1212315, y=-161555
Sensor at x=3950231, y=3688780: closest beacon is at x=3888160, y=3226725
Sensor at x=3449978, y=2328058: closest beacon is at x=3431988, y=2379841
Sensor at x=3974214, y=2582925: closest beacon is at x=3888160, y=3226725
Sensor at x=82663, y=3225533: closest beacon is at x=311197, y=4221202
Sensor at x=1958305, y=2292045: closest beacon is at x=2038311, y=2495160
Sensor at x=3465738, y=2123353: closest beacon is at x=3507689, y=2000000
Sensor at x=2940758, y=3884337: closest beacon is at x=2746166, y=4800483
Sensor at x=3429173, y=2275591: closest beacon is at x=3431988, y=2379841
Sensor at x=1527349, y=38565: closest beacon is at x=1212315, y=-161555
Sensor at x=3049925, y=2498038: closest beacon is at x=3431988, y=2379841
Sensor at x=1593202, y=3335178: closest beacon is at x=1910058, y=3117415
Sensor at x=3175520, y=3230234: closest beacon is at x=3888160, y=3226725
"""
```

```elixir
example = """
Sensor at x=2, y=18: closest beacon is at x=-2, y=15
Sensor at x=9, y=16: closest beacon is at x=10, y=16
Sensor at x=13, y=2: closest beacon is at x=15, y=3
Sensor at x=12, y=14: closest beacon is at x=10, y=16
Sensor at x=10, y=20: closest beacon is at x=10, y=16
Sensor at x=14, y=17: closest beacon is at x=10, y=16
Sensor at x=8, y=7: closest beacon is at x=2, y=10
Sensor at x=2, y=0: closest beacon is at x=2, y=10
Sensor at x=0, y=11: closest beacon is at x=2, y=10
Sensor at x=20, y=14: closest beacon is at x=25, y=17
Sensor at x=17, y=20: closest beacon is at x=21, y=22
Sensor at x=16, y=7: closest beacon is at x=15, y=3
Sensor at x=14, y=3: closest beacon is at x=15, y=3
Sensor at x=20, y=1: closest beacon is at x=15, y=3
"""
```

```elixir
data =
  input
  |> String.split("\n", trim: true)
  |> Enum.map(fn line ->
    matches =
      Regex.named_captures(
        ~r/Sensor at x=(?<sx>\d+), y=(?<sy>\d+): closest beacon is at x=(?<bx>-?\d+), y=(?<by>-?\d+)/,
        line
      )

    {
      {
        matches["sx"] |> String.to_integer(),
        matches["sy"] |> String.to_integer()
      },
      {
        matches["bx"] |> String.to_integer(),
        matches["by"] |> String.to_integer()
      }
    }
  end)
```

```elixir
defmodule Day15 do
  def new(list, y \\ 2_000_000) do
    list
    |> Enum.reduce({MapSet.new(), MapSet.new()}, fn {{n0, _} = p1, p2}, {beacons, cants} ->
      beacons = MapSet.put(beacons, p2)
      dist = manhattan(p1, p2)

      cants =
        (n0 - dist)..(n0 + dist + 1)
        |> Enum.to_list()
        |> Enum.reduce(cants, fn x, cants ->
          if manhattan(p1, {x, y}) <= dist do
            MapSet.put(cants, {x, y})
          else
            cants
          end
        end)

      {beacons, cants}
    end)
  end

  def manhattan({ax, ay}, {bx, by}) do
    abs(ax - bx) + abs(ay - by)
  end
end
```

## Part 1

```elixir
data
|> Day15.new()
|> then(fn {beacons, cants} ->
  MapSet.difference(cants, beacons)
  |> Enum.count()
end)
```

## Part 2 - Solver (Fail)

```elixir
defmodule Day15CSP do
  def solve(csp) do
    Csp.solve(csp, method: :min_conflicts, tabu_depth: 10)
  end
end
```

```elixir
solver = %Csp{
  variables: [:x, :y],
  domains: %{
    x: 0..4_000_000,
    y: 0..4_000_000
  },
  constraints: [
    {[:x], fn [x] -> x >= 0 end},
    {[:y], fn [y] -> y >= 0 end},
    {[:x], fn [x] -> x <= 4_000_000 end},
    {[:y], fn [y] -> y <= 4_000_000 end}
  ]
}

solver =
  data
  |> Enum.reduce(solver, fn {{n0, n1}, {n2, n3}}, acc ->
    dist = Day15.manhattan({n0, n1}, {n2, n3})

    Map.update(acc, :constraints, [], fn exc ->
      [{[:x, :y], fn [x, y] -> abs(x - n0) + abs(y - n1) >= dist end} | exc]
    end)
  end)

# Day15CSP.solve(solver)
```

## Part 2 - Quad Tree

```elixir
defmodule Day15QT do
  def manhattan({ax, ay}, {bx, by}) do
    abs(ax - bx) + abs(ay - by)
  end

  def solve(list, limit \\ 4_000_000) do
    square = {{0, 0}, {limit, limit}}
    sensor_rays = Enum.map(list, fn {sensor, beacon} -> {sensor, manhattan(sensor, beacon)} end)

    {x, y} = find_point([square], sensor_rays)
    x * 4_000_000 + y
  end

  defp find_point([{{xl, yl}, {xh, yh}} = square | squares], rays) do
    covered? =
      Enum.any?(rays, fn {xy_sensor, range} ->
        manhattan(xy_sensor, {xl, yl}) <= range and
          manhattan(xy_sensor, {xh, yl}) <= range and
          manhattan(xy_sensor, {xl, yh}) <= range and
          manhattan(xy_sensor, {xh, yh}) <= range
      end)

    cond do
      covered? ->
        find_point(squares, rays)

      is_point?(square) ->
        square_to_point(square)

      true ->
        # if the square is not covered, we split it in four squares

        add =
          square
          |> split_vertically()
          |> Enum.flat_map(&split_horizontally(&1))

        new_squares = add ++ squares

        find_point(new_squares, rays)
    end
  end

  defp is_point?({xy, xy}) do
    true
  end

  defp is_point?(_) do
    false
  end

  defp square_to_point({xy, _}) do
    xy
  end

  defp split_vertically({{xl, yl}, {xh, yh}}) when xh > xl + 1 do
    half_x = middle(xl, xh)
    [{{xl, yl}, {half_x, yh}}, {{half_x + 1, yl}, {xh, yh}}]
  end

  defp split_vertically({{xl, yl}, {xh, yh}}) when xh == xl + 1 do
    [{{xl, yl}, {xl, yh}}, {{xh, yl}, {xh, yh}}]
  end

  defp split_vertically({{x, _}, {x, _}} = square) do
    [square]
  end

  defp split_horizontally({{xl, yl}, {xh, yh}}) when yh > yl + 1 do
    half_y = middle(yl, yh)
    [{{xl, yl}, {xh, half_y}}, {{xl, half_y + 1}, {xh, yh}}]
  end

  defp split_horizontally({{xl, yl}, {xh, yh}}) when yh == yl + 1 do
    [{{xl, yl}, {xh, yl}}, {{xl, yh}, {xh, yh}}]
  end

  defp split_horizontally({{_, y}, {_, y}} = square) do
    [square]
  end

  defp middle(low, high) do
    high - div(high - low, 2)
  end
end
```

```elixir
Day15QT.solve(data)
```

## Part 2 - Boundaries

```elixir
defmodule Day15B do
  def new(list) do
    sensors = list |> Enum.map(fn x -> elem(x, 0) end)
    beacons = list |> Enum.map(fn x -> elem(x, 1) end)

    list
    |> Enum.reduce(MapSet.new(), fn {{sx, sy} = p1, p2}, map ->
      dist = manhattan(p1, p2)

      for(
        x <- (sx - dist - 1)..(sx + dist + 2),
        y <- (sy - dist - 1)..(sy + dist + 2),
        do: {x, y}
      )
      |> Enum.filter(fn tp ->
        manhattan(tp, p1) == dist + 1
      end)
      |> Enum.reduce(map, fn pos, acc ->
        MapSet.put(acc, pos)
      end)
    end)
  end

  def manhattan({ax, ay}, {bx, by}) do
    abs(ax - bx) + abs(ay - by)
  end
end
```

```elixir
data
|> Day15B.new()
```
