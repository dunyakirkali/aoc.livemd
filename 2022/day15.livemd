# Advent of Code 2022

```elixir
Mix.install([
  {:kino, "~> 0.7.0"},
  :libgraph,
  :memoize,
  :distance,
  :printex,
  :drawille,
  {:comb, git: "https://github.com/tallakt/comb.git"},
  {:nx, "~> 0.2"}
])
```

## Day 14

```elixir
input = """
Sensor at x=3428425, y=2345067: closest beacon is at x=3431988, y=2379841
Sensor at x=928237, y=25774: closest beacon is at x=1212315, y=-161555
Sensor at x=2061220, y=2396791: closest beacon is at x=2038311, y=2495160
Sensor at x=1830400, y=2994568: closest beacon is at x=1910058, y=3117415
Sensor at x=2485733, y=2625804: closest beacon is at x=2038311, y=2495160
Sensor at x=1855873, y=3971916: closest beacon is at x=1910058, y=3117415
Sensor at x=119582, y=3929652: closest beacon is at x=311197, y=4221202
Sensor at x=1069031, y=3509672: closest beacon is at x=1910058, y=3117415
Sensor at x=3368023, y=2213635: closest beacon is at x=3431988, y=2379841
Sensor at x=3713877, y=2460862: closest beacon is at x=3431988, y=2379841
Sensor at x=3593503, y=2174008: closest beacon is at x=3507689, y=2000000
Sensor at x=501760, y=93436: closest beacon is at x=1212315, y=-161555
Sensor at x=3712703, y=214999: closest beacon is at x=3507689, y=2000000
Sensor at x=1594824, y=2790273: closest beacon is at x=1910058, y=3117415
Sensor at x=2539549, y=3190814: closest beacon is at x=1910058, y=3117415
Sensor at x=3522790, y=2671548: closest beacon is at x=3431988, y=2379841
Sensor at x=1001452, y=1327490: closest beacon is at x=1212315, y=-161555
Sensor at x=629209, y=2451628: closest beacon is at x=-416149, y=2226089
Sensor at x=2636827, y=1146266: closest beacon is at x=3507689, y=2000000
Sensor at x=3909, y=625124: closest beacon is at x=1212315, y=-161555
Sensor at x=3950231, y=3688780: closest beacon is at x=3888160, y=3226725
Sensor at x=3449978, y=2328058: closest beacon is at x=3431988, y=2379841
Sensor at x=3974214, y=2582925: closest beacon is at x=3888160, y=3226725
Sensor at x=82663, y=3225533: closest beacon is at x=311197, y=4221202
Sensor at x=1958305, y=2292045: closest beacon is at x=2038311, y=2495160
Sensor at x=3465738, y=2123353: closest beacon is at x=3507689, y=2000000
Sensor at x=2940758, y=3884337: closest beacon is at x=2746166, y=4800483
Sensor at x=3429173, y=2275591: closest beacon is at x=3431988, y=2379841
Sensor at x=1527349, y=38565: closest beacon is at x=1212315, y=-161555
Sensor at x=3049925, y=2498038: closest beacon is at x=3431988, y=2379841
Sensor at x=1593202, y=3335178: closest beacon is at x=1910058, y=3117415
Sensor at x=3175520, y=3230234: closest beacon is at x=3888160, y=3226725
"""
```

```elixir
example = """
Sensor at x=2, y=18: closest beacon is at x=-2, y=15
Sensor at x=9, y=16: closest beacon is at x=10, y=16
Sensor at x=13, y=2: closest beacon is at x=15, y=3
Sensor at x=12, y=14: closest beacon is at x=10, y=16
Sensor at x=10, y=20: closest beacon is at x=10, y=16
Sensor at x=14, y=17: closest beacon is at x=10, y=16
Sensor at x=8, y=7: closest beacon is at x=2, y=10
Sensor at x=2, y=0: closest beacon is at x=2, y=10
Sensor at x=0, y=11: closest beacon is at x=2, y=10
Sensor at x=20, y=14: closest beacon is at x=25, y=17
Sensor at x=17, y=20: closest beacon is at x=21, y=22
Sensor at x=16, y=7: closest beacon is at x=15, y=3
Sensor at x=14, y=3: closest beacon is at x=15, y=3
Sensor at x=20, y=1: closest beacon is at x=15, y=3
"""
```

```elixir
data =
  input
  |> String.split("\n", trim: true)
  |> Enum.map(fn line ->
    matches =
      Regex.named_captures(
        ~r/Sensor at x=(?<sx>\d+), y=(?<sy>\d+): closest beacon is at x=(?<bx>-?\d+), y=(?<by>-?\d+)/,
        line
      )

    {
      {
        matches["sx"] |> String.to_integer(),
        matches["sy"] |> String.to_integer()
      },
      {
        matches["bx"] |> String.to_integer(),
        matches["by"] |> String.to_integer()
      }
    }
  end)
```

```elixir
defmodule Day15 do
  def n2(list) do
    y = 2_000_000

    list
    |> Enum.reduce({MapSet.new(), MapSet.new()}, fn {{n0, n1} = p1, p2}, {beacons, cants} ->
      beacons = MapSet.put(beacons, p2)
      dist = dist(p1, p2)

      cants =
        (n0 - dist)..(n0 + dist + 1)
        |> Enum.to_list()
        |> Enum.reduce(cants, fn x, cants ->
          if dist(p1, {x, y}) <= dist do
            MapSet.put(cants, {x, y})
          else
            cants
          end
        end)

      {beacons, cants}
    end)
  end

  def new(list) do
    list
    |> Enum.reduce({MapSet.new(), MapSet.new()}, fn {s, b}, {map, dis} ->
      map =
        map
        |> MapSet.put(s, "S")
        |> MapSet.put(b, "B")

      dis =
        dis
        |> MapSet.put(s, {b, dist(s, b)})

      {map, dis}
    end)
  end

  def dist({ax, ay}, {bx, by}) do
    abs(ax - bx) + abs(ay - by)
  end

  def fill({map, dis}) do
    sensors =
      map
      |> Enum.filter(fn {_, v} ->
        v == "S"
      end)
      |> Enum.filter(fn {{_, sy} = sp, _} ->
        {_, radius} = MapSet.get(dis, sp)
        0 < sy - radius and 4_000_000 < sy + radius
      end)

    sensors
    |> Enum.reduce(map, fn {{sx, sy} = sp, _}, map ->
      {_, radius} = MapSet.get(dis, sp)

      for(x <- -radius..radius, y <- -radius..radius, do: {x, y})
      |> Stream.filter(fn {dx, dy} ->
        np = {sx + dx, sy + dy}
        dist(sp, np) <= radius
      end)
      |> Enum.reduce(map, fn {dx, dy}, map ->
        {nx, ny} = {sx + dx, sy + dy}

        case MapSet.get(map, {nx, ny}, ".") do
          "S" -> map
          "B" -> map
          "#" -> map
          "." -> MapSet.put(map, {nx, ny}, "#")
        end
      end)
    end)
  end

  def draw(map) do
    {{minx, maxx}, {miny, maxy}} = size(map)

    Enum.each(miny..maxy, fn y ->
      Enum.map(minx..maxx, fn x ->
        MapSet.get(map, {x, y}, ".")
      end)
      |> Enum.join("")
      |> IO.puts()
    end)

    map
  end

  def size(map) do
    xs =
      map
      |> MapSet.keys()
      |> Enum.map(fn {x, _} -> x end)

    ys =
      map
      |> MapSet.keys()
      |> Enum.map(fn {_, y} -> y end)

    {{Enum.min(xs), Enum.max(xs)}, {Enum.min(ys), Enum.max(ys)}} |> IO.inspect()
  end
end
```

## Part 1

```elixir
data
|> Day15.n2()
|> then(fn {beacons, cants} ->
  MapSet.difference(cants, beacons)
  |> Enum.count()
end)
```

```elixir
data
|> Day15.new()
|> Day15.fill()
|> Day15.draw()
|> Enum.filter(fn {{_, y}, _} ->
  y == 2_000_000
end)
|> Enum.count(fn {_, v} ->
  v == "#"
end)
```

## Part 2

```elixir
map =
  data
  |> Day15.new()
  |> Day15.fill()

for(x <- 0..4_000_000, y <- 0..4_000_000, do: {x, y})
|> Enum.filter(fn op ->
  MapSet.get(map, op, ".") == "."
end)
|> List.first()
|> then(fn {x, y} ->
  x * 4_000_000 + y
end)
```
